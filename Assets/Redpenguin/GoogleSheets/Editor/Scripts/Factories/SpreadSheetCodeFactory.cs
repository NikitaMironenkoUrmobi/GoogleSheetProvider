using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using Redpenguin.GoogleSheets.Attributes;
using UnityEditor;
using UnityEngine;

namespace Redpenguin.GoogleSheets.Editor.Factories
{
  public interface IAutoGenFactory
  {
    bool Create(List<Type> types, string profileName);
    bool Delete(string profileName);
  }

  public class SpreadSheetCodeFactory : IAutoGenFactory
  {
    private const string ScriptName = "%CLASS_NAME%";
    private const string SerializeClass = "%SERIALIZE_CLASS%";
    private const string SheetRange = "%SHEET_RANGE%";
    private const string ProfileName = "%PROFILE_NAME%";
    private const string NameSpace = "%NAMESPACE%";
    private const string SoTemplate = "CodeTemplates/SpreadSheetScriptableObjectTemplate";
    private string _savePath = $"{Application.dataPath}/GoogleSheets/AutoGenerated/Scripts";

    private readonly TextAsset _scriptTextAsset;
    private readonly ConsoleLogger _consoleLogger;

    public SpreadSheetCodeFactory(ConsoleLogger consoleLogger)
    {
      _consoleLogger = consoleLogger;
      _scriptTextAsset = Resources.Load<TextAsset>(SoTemplate);
    }

    private void CreateIfNotExist(string path)
    {
      if (!Directory.Exists(path))
      {
        Directory.CreateDirectory(path);
      }
    }

    public bool Create(List<Type> types, string profileName)
    {
      _savePath = $"{Application.dataPath}/GoogleSheets/{profileName}/Scripts";
      var count = 0;
      CreateIfNotExist(_savePath);
      foreach (var type in types)
      {
        var sheet = type.GetCustomAttribute(typeof(SpreadSheetAttribute)) as SpreadSheetAttribute;
        var scriptName = $"{type.Name}SheetDatabaseScriptableObject{profileName}";
        var scriptText = Replace(_scriptTextAsset.text, scriptName, type.Name, sheet?.Range, type.Namespace, profileName);
        CreateScriptFile(scriptText, scriptName, _savePath);
        count++;
      }
      ScriptsCreatedLog(count);
      if (count == 0) return false;
      AssetDatabase.SaveAssets();
      AssetDatabase.Refresh();
      return count > 0;
    }

    private void ScriptsCreatedLog(int count)
    {
      if (count == 0)
      {
        _consoleLogger.LogCantFindClassesWithSpreadSheetAttribute();
      }
      else
      {
        Debug.Log("Additional scripts was created! Waiting for reload assemblies...".WithColor(ColorExt.WaitingColor));
      }
    }

    private string Replace(string scriptText, string scriptName, string className, string sheetRange, string nameSpace, 
      string profileName)
    {
      var sb = new StringBuilder(scriptText);
      sb.Replace(ScriptName, scriptName);
      sb.Replace(SerializeClass, className);
      sb.Replace(SheetRange, sheetRange);
      sb.Replace(NameSpace, nameSpace);
      sb.Replace(ProfileName, profileName);
      return sb.ToString();
    }

    private void CreateScriptFile(string codeText, string scriptName, string savePath)
    {
      var path = $"{savePath}/{scriptName}.cs";
      File.WriteAllText(path, codeText);
    }

    public bool Delete(string profileName)
    {
      return AssetDatabase.DeleteAsset($"Assets/GoogleSheets/{profileName}/Scripts");
    }
  }
}