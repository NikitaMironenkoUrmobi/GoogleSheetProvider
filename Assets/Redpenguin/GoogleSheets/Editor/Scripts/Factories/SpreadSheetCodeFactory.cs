using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Redpenguin.GoogleSheets.Attributes;
using Redpenguin.GoogleSheets.Editor.Utils;
using UnityEditor;
using UnityEngine;

namespace Redpenguin.GoogleSheets.Editor.Factories
{
  public class SpreadSheetCodeFactory
  {
    private const string ScriptName = "%CLASS_NAME%";
    private const string SerializeClass = "%SERIALIZE_CLASS%";
    private const string SheetRange = "%SHEET_RANGE%";
    private const string NameSpace = "%NAMESPACE%";
    private const string SoTemplate = "CodeTemplates/SpreadSheetScriptableObjectTemplate";

    private const string SpreadSheetAttributeLink
      = "<a href=\"Assets/Redpenguin/GoogleSheets/Runtime/Attributes/SpreadSheet.cs\" line=\"6\">SpreadSheet</a>";

    private const string ExampleAttributeUsageLink
      = "<a href=\"Assets/Redpenguin/GoogleSheets/Runtime/Examples/ExampleData.cs\" line=\"8\">Example</a>";

    private string _savePath =
      $"{Application.dataPath}/GoogleSheets/AutoGenerated/Scripts";
    private readonly string SavePath =
      $"Assets/GoogleSheets/AutoGenerated/Scripts";

    private readonly TextAsset _scriptTextAsset;
    private readonly List<Type> _listOfTypes = new();

    public SpreadSheetCodeFactory()
    {
      _scriptTextAsset = Resources.Load<TextAsset>(SoTemplate);
    }

    private void CreateIfNotExist(string path)
    {
      if (!Directory.Exists(path))
      {
        Directory.CreateDirectory(path);
      }
    }

    public bool CreateAdditionalScripts(string profileName)
    {
      _savePath =  $"{Application.dataPath}/GoogleSheets/{profileName}/Scripts";
      var count = 0;
      CreateIfNotExist(_savePath);
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        foreach (var type in assembly.GetTypes())
        {
          if (!(type.GetCustomAttribute(typeof(SpreadSheet)) is SpreadSheet sheet)) continue;
          //var scriptName = $"{sheet.Name}SheetDatabaseScriptableObject";
          var scriptName = $"{type.Name}SheetDatabaseScriptableObject";
          var file = Replace(_scriptTextAsset.text, scriptName, type.Name, sheet.Range, type.Namespace);
          CreateScript(file, scriptName, _savePath);
          count++;
        }
      }
      ScriptsCreatedLog(count);
      if (count == 0) return false;
      AssetDatabase.SaveAssets();
      AssetDatabase.Refresh();
      return count > 0;
    }

    private void ScriptsCreatedLog(int count)
    {
      Debug.Log(count > 0
        ? "Additional scripts was created! Waiting for reload assemblies...".WithColor(ColorExt.WaitingColor)
        : $"Didn't find classes with {SpreadSheetAttributeLink} attribute. ({ExampleAttributeUsageLink})".WithColor(ColorExt.ErrorColor));
    }

    public string CantFindClass()
    {
      return $"Didn't find classes with {SpreadSheetAttributeLink} attribute. Click on link to see example({ExampleAttributeUsageLink})".WithColor(ColorExt.ErrorColor);
    }
    private string Replace(string scriptText, string scriptName, string className, string sheetRange, string nameSpace)
    {
      var sb = new StringBuilder(scriptText);
      sb.Replace(ScriptName, scriptName);
      sb.Replace(SerializeClass, className);
      sb.Replace(SheetRange, sheetRange);
      sb.Replace(NameSpace, nameSpace);
      return sb.ToString();
    }

    private void CreateScript(string codeText, string scriptName, string savePath)
    {
      var path = $"{savePath}/{scriptName}.cs";
      File.WriteAllText(path, codeText);
    }

    public void DeleteAllScripts(string profileName)
    {
      AssetDatabase.DeleteAsset( $"Assets/GoogleSheets/{profileName}/Scripts");
    }

    public List<Type> GetGeneratedScriptsTypes()
    {
      _listOfTypes.Clear();
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        assembly.GetTypes().Where(type =>
            (type.GetCustomAttribute(typeof(SheetRange)) is SheetRange))
          .ToList().ForEach(x => _listOfTypes.Add(x));
      }

      return _listOfTypes;
    }
    public List<Type> GetClassWithSpreadSheetAttribute()
    {
      var listOfTypes = new List<Type>();
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        assembly.GetTypes().Where(type => 
            type.GetCustomAttribute(typeof(SpreadSheet)) is SpreadSheet)
          .ToList().ForEach(x => listOfTypes.Add(x));
      }

      return listOfTypes;
    }
  }
}